#!/usr/bin/env ruby
require 'trollop'
require 'cfn-nag'
require 'logging'
require 'json'
require 'rubygems/specification'

opts = Trollop.options do
  usage '[options] <cloudformation template path ...>|<cloudformation template in STDIN>'
  version Gem::Specification.find_by_name('cfn-nag').version

  opt :debug,
      'Enable debug output',
      type: :boolean,
      required: false,
      default: false
  opt :allow_suppression,
      'Allow using Metadata to suppress violations',
      type: :boolean,
      required: false,
      default: true
  opt :print_suppression,
      'Emit suppressions to stderr',
      type: :boolean,
      required: false,
      default: false
  opt :rule_directory,
      'Extra rule directory',
      type: :io,
      required: false,
      default: nil
  opt :profile_path,
      'Path to a profile file',
      type: :io,
      required: false,
      default: nil
  opt :parameter_values_path,
      'Path to a JSON file to pull Parameter values from',
      type: :io,
      required: false,
      default: nil
  opt :isolate_custom_rule_exceptions,
      'Isolate custom rule exceptions - just emit the exception without stack trace and keep chugging',
      type: :boolean,
      required: false,
      default: false
  opt :listen_port,
      'Listen port - binding port for REST service',
      required: false,
      default: 4567
  opt :listen_addr,
      'Listen address - which address to listen on',
      required: false,
      default: '127.0.0.1'
end

# not sure the exact way to get sinatra to not consume opts
require 'sinatra'

CfnNag.configure_logging(opts)

profile_definition = nil
unless opts[:profile_path].nil?
  profile_definition = IO.read(opts[:profile_path])
end

parameter_values_string = nil
unless opts[:parameter_values_path].nil?
  parameter_values_string = IO.read(opts[:parameter_values_path])
end

set :bind, opts[:listen_addr]
set :port, opts[:listen_port]

cfn_nag = CfnNag.new(profile_definition: profile_definition,
                     rule_directory: opts[:rule_directory],
                     allow_suppression: opts[:allow_suppression],
                     print_suppression: opts[:print_suppression],
                     isolate_custom_rule_exceptions:
                     opts[:isolate_custom_rule_exceptions])

get '/' do
  'POST only'
end

post '/' do
  request.body.rewind
  results = cfn_nag.audit(cloudformation_string: request.body.read,parameter_values_string: parameter_values_string)
  results[:violations] = results[:violations].map(&:to_h)
  JSON.pretty_generate(results)
end
run Sinatra::Application.run!
